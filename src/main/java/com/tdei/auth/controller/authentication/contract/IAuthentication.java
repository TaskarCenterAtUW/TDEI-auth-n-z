/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tdei.auth.controller.authentication.contract;

import com.tdei.auth.config.exception.handler.exceptions.InvalidAccessTokenException;
import com.tdei.auth.model.dto.auth.TokenResponse;
import com.tdei.auth.model.dto.auth.UserProfile;
import com.tdei.auth.model.dto.common.LoginModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.security.InvalidKeyException;

@Validated
public interface IAuthentication {
    @Operation(summary = "Validates the API Key", description = "Validates the API Key.  Returns the user profile for the validated api key. ",
            tags = {"Authentication"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful response - Returns the user profile for the validated api key.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProfile.class)))),

            @ApiResponse(responseCode = "404", description = "API Key is invalid.", content = @Content),

            @ApiResponse(responseCode = "500", description = "An server error occurred.", content = @Content)})
    @RequestMapping(value = "validateApiKey",
            produces = {"application/json"},
            consumes = {"text/plain"},
            method = RequestMethod.POST)
    ResponseEntity<UserProfile> validateApiKey(@RequestBody String apiKey) throws InvalidKeyException;

    @Operation(summary = "Validates the API Key", description = "Validates the Access Token.  Returns the user profile for the validated access token. ",
            tags = {"Authentication"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful response - Returns the user profile for the validated access token.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProfile.class)))),

            @ApiResponse(responseCode = "404", description = "Access token is invalid.", content = @Content),

            @ApiResponse(responseCode = "500", description = "An server error occurred.", content = @Content)})
    @RequestMapping(value = "validateAccessToken",
            produces = {"application/json"},
            consumes = {"text/plain"},
            method = RequestMethod.POST)
    ResponseEntity<UserProfile> validateAccessToken(@RequestBody String token) throws InvalidAccessTokenException;

    @Operation(summary = "List available API versions", description = "Returns a json list of the versions of the TDEI API which are available.",
            tags = {"Authentication"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful response - Returns the access token for the validated user.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TokenResponse.class)))),

            @ApiResponse(responseCode = "401", description = "This request is unauthorized.", content = @Content),

            @ApiResponse(responseCode = "500", description = "An server error occurred.", content = @Content)})
    @RequestMapping(value = "authenticate",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<TokenResponse> authenticate(@RequestBody LoginModel loginModel);
}

